# datapath 

# mv_p1  (move player 1)
# mv_p2  (move player 2) 

# wm_1   (win move player 1)
# wm_2   (win move player 2)
# max    (max match checker to FSM)
# min    (min match checker to FSM)

# wbg    (wire begin move)
# wg1    (wire move player 1)
# wg2    (wire move player 2)
# wst1   (wire set manche player 1)
# wst2   (wire set manche player 2)
# rgmv1  (wire register check forward move player 1)
# rgmv2  (wire register check forward move player 2)
# wwm    (wire winnwr manche)
# nrgmv1 (wire new register check forward move player 1)
# nrgmv2 (wire new register check forward move player 2)
# rgcm   (wire register check current manche)
# wcount (wire counter manche)
# wcm    (wire current manche)
## win    (wire reset input)
## wmin   (wire control of the min manche)
## wmax   (wire control of the max manche)
# wrgmx  (wire register check max manche)
# wnmax  (wire new manche max)
# wcmax  (wire manche max mux choice)


.model datapath 
.inputs mv_p1_1 mv_p1_2 mv_p2_1 mv_p2_2 reset
.outputs wm1 wm2  min max     




# match selector (inputs 2 bit | outputs 4 bit)

.subckt demux_setmax_p1 mv_p1_1=mv_p1_1 mv_p1_2=mv_p1_2 reset=reset  mossa_1=wg1_1 mossa_2=wg1_2 max_1=wst1_1 max_2=wst1_2 
.subckt demux_setmax_p2 mv_p2_1=mv_p2_1 mv_p2_2=mv_p2_2 reset=reset  mossa_1=wg2_1 mossa_2=wg2_2 max_1=wst2_1 max_2=wst2_2

# vs (inputs 8 bit | outpus 6 bit)

.subckt vs_implementato_jolly block1_1=rgmv1_1 block1_2=rgmv1_2 block2_1=rgmv2_1 block2_2=rgmv2_2 g1_1=wg1_1 g1_2=wg1_2 g2_1=wg2_1 g2_2=wg2_2  gwin_1=wm1 gwin_2=wm2 newblock1_1=nrgmv1_1 newblock1_2=nrgmv1_2 newblock2_1=nrgmv2_1 newblock2_2=nrgmv2_2
.subckt registro2_G1 a1=nrgmv1_1 a2=nrgmv1_2  o1=rgmv1_1 o2=rgmv1_2
.subckt registro2_G2 a1=nrgmv2_1 a2=nrgmv2_2  o1=rgmv2_1 o2=rgmv2_2

# counter manche (inputs 5 bit | outputs 5 bit)

.subckt contatore s1=wm1 s2=wm2 i1=rgcm_1 i2=rgcm_2 i3=rgcm_3 i4=rgcm_4 i5=rgcm_5  a=wcount_1 b=wcount_2 c=wcount_3 d=wcount_4 e=wcount_5
.subckt mux_reset m_c1=wcount_1 m_c2=wcount_2 m_c3=wcount_3 m_c4=wcount_4 m_c5=wcount_5 reset=reset  m_sum1=wcm_1 m_sum2=wcm_2 m_sum3=wcm_3 m_sum4=wcm_4 m_sum5=wcm_5
.subckt registro5_corrente a1=wcm_1 a2=wcm_2 a3=wcm_3 a4=wcm_4 a5=wcm_5  o1=rgcm_1 o2=rgcm_2 o3=rgcm_3 o4=rgcm_4 o5=rgcm_5

# controls (inputs 5 bit | output 1 bit) (inputs 10 bit | outputs 5 bit)

.subckt comparatore_min m1=wcount_1 m2=wcount_2 m3=wcount_3 m4=wcount_4 m5=wcount_5  o=min
.subckt comparatore_max m1=wcount_1 m2=wcount_2 m3=wcount_3 m4=wcount_4 m5=wcount_5 x1=wrgmx_1 x2=wrgmx_2 x3=wrgmx_3 x4=wrgmx_4 x5=wrgmx_5  o=max

# max manche setting (inputs 4 bit | outputs 5 bit)

.subckt sum_mosse_max a1=wst1_1 a2=wst1_2 b1=wst2_1 b2=wst2_2 o1=wnmax_1 o2=wnmax_2 o3=wnmax_3 o4=wnmax_4 o5=wnmax_5

.subckt mux_remembermax remember1=wrgmx_1 remember2=wrgmx_2 remember3=wrgmx_3 remember4=wrgmx_4 remember5=wrgmx_5 m_m1=wnmax_1 m_m2=wnmax_2 m_m3=wnmax_3 m_m4=wnmax_4 m_m5=wnmax_5 reset=reset  m_r1=wcmax_1 m_r2=wcmax_2 m_r3=wcmax_3 m_r4=wcmax_4 m_r5=wcmax_5
.subckt registro5_max a1=wcmax_1 a2=wcmax_2 a3=wcmax_3 a4=wcmax_4 a5=wcmax_5  o1=wrgmx_1 o2=wrgmx_2 o3=wrgmx_3 o4=wrgmx_4 o5=wrgmx_5


#search .blif player choice match 
.search demux_setmax_p1.blif
.search demux_setmax_p2.blif
.search sum_mosse_max.blif
.search mux_remembermax.blif  
.search registro5_max.blif
.search comparatore_max.blif
.search comparatore_min.blif
#search .blif vs moves 
.search vs_implementato_jolly.blif
.search mux_reset.blif
.search registro2_G1.blif
.search registro2_G2.blif
#search .blif count match 
.search contatore.blif
.search registro5_corrente.blif

.end

#?# reset_1: mv_p1_1 mv_p1_2 mv_p2_1 mv_p2_2 reset | wm1 wm2 min max
#00001 | 0000
#00011 | 0000
#00001 | 0000
#00111 | 0000
#00101 | 0000
#01001 | 0000
#01011 | 0000
#01101 | 0000
#01111 | 0000
#10001 | 0000
#10011 | 0000
#10101 | 0000
#10111 | 0000
#11001 | 0000
#11011 | 0000
#11101 | 0000
#11111 | 0000
#!#

#?# reset_0__invalid_moves: mv_p1_1 mv_p1_2 mv_p2_1 mv_p2_2 reset | wm1 wm2 min max
#00000 | 0000
#00010 | 0000
#00100 | 0000
#00110 | 0000
#01000 | 0000
#10000 | 0000
#11000 | 0000
#!#

#?# moves_01_01: mv_p1_1 mv_p1_2 mv_p2_1 mv_p2_2 reset | wm1 wm2 min max
#01010 | 1100
#!#

#?# moves_01_10: mv_p1_1 mv_p1_2 mv_p2_1 mv_p2_2 reset | wm1 wm2 min max
#01100 | 1000
#!#

#?# moves_01_11: mv_p1_1 mv_p1_2 mv_p2_1 mv_p2_2 reset | wm1 wm2 min max
#01110 | 0100
#!#

#?# moves_01_01: mv_p1_1 mv_p1_2 mv_p2_1 mv_p2_2 reset | wm1 wm2 min max
#10010 | 0100
#!#

#?# moves_10_10: mv_p1_1 mv_p1_2 mv_p2_1 mv_p2_2 reset | wm1 wm2 min max
#10100 | 1100
#!#

#?# moves_10_11: mv_p1_1 mv_p1_2 mv_p2_1 mv_p2_2 reset | wm1 wm2 min max
#10110 | 1000
#!#

#?# moves_11_01: mv_p1_1 mv_p1_2 mv_p2_1 mv_p2_2 reset | wm1 wm2 min max
#11010 | 1000
#!#

#?# moves_11_10: mv_p1_1 mv_p1_2 mv_p2_1 mv_p2_2 reset | wm1 wm2 min max
#11100 | 0100
#!#

#?# moves_11_11: mv_p1_1 mv_p1_2 mv_p2_1 mv_p2_2 reset | wm1 wm2 min max
#11110 | 1100
#!#

# questo test blif tiene conto del test precedente, come se a ogni riga di ogni blocco di test, incrementasse il ck